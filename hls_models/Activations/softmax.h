#ifndef __ADNNET_RELU__
#define __ADNNET_RELU__

#include "defines.h"

namespace dcnn {
  namespace cpp {

    template<typename dtype_I, typename dtype_O,
            int N, int Tn, int Tm>
    class Softmax {
      private:


        typedef io_interfaces::IO_DATATYPE<dtype_I, io_interfaces::VECTOR> chanI;
        typedef io_interfaces::IO_DATATYPE<dtype_O, io_interfaces::VECTOR> chanO;

      public:
        Softmax() {};
        ~Softmax() {};

        void run(chanI &inp, chanO &out){
          
          dtype_I max_val, cur_inp[N];
          for (int n = 0; n < N; n+=Tn) {
            for (int tn = 0; tn < Tn; tn++) {
              cur_inp[n+tn] = inp.read();
              max_val = (n+tn == 0) ? cur_inp[0] : ((max_val >= cur_inp[n+tn]) ? max_val : cur_inp[n+tn]);
            }
          }

          for (int m = 0; m < N; m+=Tm) {
            for (int tm = 0; tm < Tm; tm++) {
              dtype_I diff = max_val - cur_inp[n+tn];
              postAct.itm[tm] = calc_exp(diff);
            } 
            out.write(postAct);
          }

        };
    };
  }; // (namespace) cpp

  namespace hls {
    // Accuracy takes values 1, 2, 4
    #pragma hls_design
    template<typename dtype_I, typename dtype_O,
             int Accuracy, int N, int Tn, int Tm>
    class Softmax {
      private:

        typedef ac_fixed<21,1,false> LUT_t;

        typedef compactDataT<dtype_I, Tm> unrolled_dti;
        typedef compactDataT<dtype_O, Tm> unrolled_dto;

        typedef io_interfaces::IO_DATATYPE<unrolled_dti, io_interfaces::CHANNEL> chanI;
        typedef io_interfaces::IO_DATATYPE<unrolled_dto, io_interfaces::CHANNEL> chanO;

        const LUT_t exp_L1[Accuracy*128];
        const LUT_t exp_L2[8];

        dtype_I inp_buffer[N];

        dtype calc_exp(dtype &in){
          int7bit ind7;
          int3bit ind3;
          
          ind7 = in.slc<7>(4);
          ind3 = in.slc<3>(10);
          
          return (in == 0) ? 1 : (in < 0.125) ? expLUT1[ind7] : (in < 0.1875) ? expLUT2[ind3] : 0;
        }

      public:
        Softmax() {
          
          exp_L2 = {0.000335463, 0.000203468, 0.00012341, 7.48518e-05, 4.53999e-05, 2.75364e-05, 1.67017e-05, 1.01301e-05};

          if (Accuracy == 1)
            exp_L1 = {1, 0.939413, 0.882497, 0.829029, 0.778801, 0.731616, 0.687289, 0.645649, 0.606531, 0.569783, 0.535261, 0.502832, 0.472367, 0.443747, 0.416862, 0.391606, 0.367879, 0.345591, 0.324652, 0.304983, 0.286505, 0.269146, 0.25284, 0.237521, 0.22313, 0.209611, 0.196912, 0.184981, 0.173774, 0.163246, 0.153355, 0.144064, 0.135335, 0.127136, 0.119433, 0.112197, 0.105399, 0.0990134, 0.0930145, 0.087379, 0.082085, 0.0771117, 0.0724398, 0.0680509, 0.0639279, 0.0600547, 0.0564161, 0.0529981, 0.0497871, 0.0467706, 0.0439369, 0.0412749, 0.0387742, 0.036425, 0.0342181, 0.0321449, 0.0301974, 0.0283678, 0.0266491, 0.0250345, 0.0235177, 0.0220929, 0.0207543, 0.0194969, 0.0183156, 0.0172059, 0.0161635, 0.0151842, 0.0142642, 0.0134, 0.0125881, 0.0118255, 0.011109, 0.0104359, 0.00980365, 0.00920968, 0.0086517, 0.00812752, 0.00763509, 0.00717251, 0.00673795, 0.00632972, 0.00594622, 0.00558595, 0.00524752, 0.00492959, 0.00463092, 0.00435035, 0.00408677, 0.00383917, 0.00360656, 0.00338805, 0.00318278, 0.00298995, 0.00280879, 0.00263862, 0.00247875, 0.00232857, 0.00218749, 0.00205496, 0.00193045, 0.00181349, 0.00170362, 0.0016004, 0.00150344, 0.00141235, 0.00132678, 0.00124639, 0.00117088, 0.00109994, 0.0010333, 0.000970693, 0.000911882, 0.000856634, 0.000804733, 0.000755977, 0.000710174, 0.000667147, 0.000626727, 0.000588755, 0.000553084, 0.000519575, 0.000488095, 0.000458523, 0.000430743, 0.000404645, 0.000380129, 0.000357098};
          else if (Accuracy == 2)
            exp_L1 = {1, 0.969233, 0.939413, 0.91051, 0.882497, 0.855345, 0.829029, 0.803523, 0.778801, 0.75484, 0.731616, 0.709106, 0.687289, 0.666144, 0.645649, 0.625784, 0.606531, 0.58787, 0.569783, 0.552252, 0.535261, 0.518793, 0.502832, 0.487361, 0.472367, 0.457833, 0.443747, 0.430095, 0.416862, 0.404037, 0.391606, 0.379557, 0.367879, 0.356561, 0.345591, 0.334958, 0.324652, 0.314664, 0.304983, 0.295599, 0.286505, 0.27769, 0.269146, 0.260866, 0.25284, 0.245061, 0.237521, 0.230213, 0.22313, 0.216265, 0.209611, 0.203162, 0.196912, 0.190853, 0.184981, 0.17929, 0.173774, 0.168427, 0.163246, 0.158223, 0.153355, 0.148637, 0.144064, 0.139631, 0.135335, 0.131171, 0.127136, 0.123224, 0.119433, 0.115758, 0.112197, 0.108745, 0.105399, 0.102156, 0.0990134, 0.0959671, 0.0930145, 0.0901527, 0.087379, 0.0846907, 0.082085, 0.0795595, 0.0771117, 0.0747392, 0.0724398, 0.070211, 0.0680509, 0.0659572, 0.0639279, 0.061961, 0.0600547, 0.058207, 0.0564161, 0.0546804, 0.0529981, 0.0513675, 0.0497871, 0.0482553, 0.0467706, 0.0453316, 0.0439369, 0.0425851, 0.0412749, 0.040005, 0.0387742, 0.0375813, 0.036425, 0.0353043, 0.0342181, 0.0331653, 0.0321449, 0.031156, 0.0301974, 0.0292683, 0.0283678, 0.027495, 0.0266491, 0.0258292, 0.0250345, 0.0242643, 0.0235177, 0.0227942, 0.0220929, 0.0214132, 0.0207543, 0.0201158, 0.0194969, 0.018897, 0.0183156, 0.0177521, 0.0172059, 0.0166766, 0.0161635, 0.0156662, 0.0151842, 0.014717, 0.0142642, 0.0138254, 0.0134, 0.0129877, 0.0125881, 0.0122008, 0.0118255, 0.0114616, 0.011109, 0.0107672, 0.0104359, 0.0101149, 0.00980365, 0.00950203, 0.00920968, 0.00892633, 0.0086517, 0.00838551, 0.00812752, 0.00787746, 0.00763509, 0.00740019, 0.00717251, 0.00695183, 0.00673795, 0.00653064, 0.00632972, 0.00613497, 0.00594622, 0.00576327, 0.00558595, 0.00541409, 0.00524752, 0.00508607, 0.00492959, 0.00477792, 0.00463092, 0.00448844, 0.00435035, 0.0042165, 0.00408677, 0.00396103, 0.00383917, 0.00372105, 0.00360656, 0.0034956, 0.00338805, 0.00328381, 0.00318278, 0.00308486, 0.00298995, 0.00289795, 0.00280879, 0.00272238, 0.00263862, 0.00255744, 0.00247875, 0.00240249, 0.00232857, 0.00225693, 0.00218749, 0.00212019, 0.00205496, 0.00199173, 0.00193045, 0.00187106, 0.00181349, 0.0017577, 0.00170362, 0.0016512, 0.0016004, 0.00155116, 0.00150344, 0.00145718, 0.00141235, 0.0013689, 0.00132678, 0.00128596, 0.00124639, 0.00120805, 0.00117088, 0.00113486, 0.00109994, 0.0010661, 0.0010333, 0.00100151, 0.000970693, 0.000940828, 0.000911882, 0.000883826, 0.000856634, 0.000830278, 0.000804733, 0.000779974, 0.000755977, 0.000732718, 0.000710174, 0.000688325, 0.000667147, 0.000646621, 0.000626727, 0.000607444, 0.000588755, 0.000570641, 0.000553084, 0.000536068, 0.000519575, 0.000503589, 0.000488095, 0.000473078, 0.000458523, 0.000444416, 0.000430743, 0.00041749, 0.000404645, 0.000392196, 0.000380129, 0.000368434, 0.000357098, 0.000346111};
          else if (Accuracy == 4)
            exp_L1 = {1, 0.984496, 0.969233, 0.954207, 0.939413, 0.924849, 0.91051, 0.896394, 0.882497, 0.868815, 0.855345, 0.842084, 0.829029, 0.816176, 0.803523, 0.791065, 0.778801, 0.766727, 0.75484, 0.743137, 0.731616, 0.720273, 0.709106, 0.698112, 0.687289, 0.676634, 0.666144, 0.655816, 0.645649, 0.635639, 0.625784, 0.616082, 0.606531, 0.597127, 0.58787, 0.578756, 0.569783, 0.560949, 0.552252, 0.543691, 0.535261, 0.526963, 0.518793, 0.51075, 0.502832, 0.495036, 0.487361, 0.479805, 0.472367, 0.465043, 0.457833, 0.450735, 0.443747, 0.436868, 0.430095, 0.423427, 0.416862, 0.410399, 0.404037, 0.397773, 0.391606, 0.385534, 0.379557, 0.373673, 0.367879, 0.362176, 0.356561, 0.351033, 0.345591, 0.340233, 0.334958, 0.329765, 0.324652, 0.319619, 0.314664, 0.309786, 0.304983, 0.300254, 0.295599, 0.291017, 0.286505, 0.282063, 0.27769, 0.273385, 0.269146, 0.264974, 0.260866, 0.256821, 0.25284, 0.24892, 0.245061, 0.241261, 0.237521, 0.233838, 0.230213, 0.226644, 0.22313, 0.219671, 0.216265, 0.212912, 0.209611, 0.206362, 0.203162, 0.200013, 0.196912, 0.193859, 0.190853, 0.187894, 0.184981, 0.182114, 0.17929, 0.17651, 0.173774, 0.17108, 0.168427, 0.165816, 0.163246, 0.160715, 0.158223, 0.15577, 0.153355, 0.150977, 0.148637, 0.146332, 0.144064, 0.14183, 0.139631, 0.137467, 0.135335, 0.133237, 0.131171, 0.129138, 0.127136, 0.125165, 0.123224, 0.121314, 0.119433, 0.117581, 0.115758, 0.113964, 0.112197, 0.110457, 0.108745, 0.107059, 0.105399, 0.103765, 0.102156, 0.100573, 0.0990134, 0.0974783, 0.0959671, 0.0944793, 0.0930145, 0.0915724, 0.0901527, 0.088755, 0.087379, 0.0860243, 0.0846907, 0.0833777, 0.082085, 0.0808124, 0.0795595, 0.0783261, 0.0771117, 0.0759162, 0.0747392, 0.0735805, 0.0724398, 0.0713167, 0.070211, 0.0691225, 0.0680509, 0.0669958, 0.0659572, 0.0649346, 0.0639279, 0.0629368, 0.061961, 0.0610004, 0.0600547, 0.0591236, 0.058207, 0.0573046, 0.0564161, 0.0555415, 0.0546804, 0.0538327, 0.0529981, 0.0521764, 0.0513675, 0.0505711, 0.0497871, 0.0490152, 0.0482553, 0.0475072, 0.0467706, 0.0460455, 0.0453316, 0.0446288, 0.0439369, 0.0432558, 0.0425851, 0.0419249, 0.0412749, 0.040635, 0.040005, 0.0393848, 0.0387742, 0.0381731, 0.0375813, 0.0369986, 0.036425, 0.0358603, 0.0353043, 0.034757, 0.0342181, 0.0336876, 0.0331653, 0.0326512, 0.0321449, 0.0316466, 0.031156, 0.0306729, 0.0301974, 0.0297292, 0.0292683, 0.0288145, 0.0283678, 0.027928, 0.027495, 0.0270688, 0.0266491, 0.0262359, 0.0258292, 0.0254287, 0.0250345, 0.0246464, 0.0242643, 0.0238881, 0.0235177, 0.0231531, 0.0227942, 0.0224408, 0.0220929, 0.0217504, 0.0214132, 0.0210812, 0.0207543, 0.0204326, 0.0201158, 0.0198039, 0.0194969, 0.0191946, 0.018897, 0.0186041, 0.0183156, 0.0180317, 0.0177521, 0.0174769, 0.0172059, 0.0169392, 0.0166766, 0.016418, 0.0161635, 0.0159129, 0.0156662, 0.0154233, 0.0151842, 0.0149488, 0.014717, 0.0144889, 0.0142642, 0.0140431, 0.0138254, 0.013611, 0.0134, 0.0131923, 0.0129877, 0.0127864, 0.0125881, 0.012393, 0.0122008, 0.0120117, 0.0118255, 0.0116421, 0.0114616, 0.0112839, 0.011109, 0.0109368, 0.0107672, 0.0106003, 0.0104359, 0.0102741, 0.0101149, 0.00995804, 0.00980365, 0.00965166, 0.00950203, 0.00935471, 0.00920968, 0.0090669, 0.00892633, 0.00878794, 0.0086517, 0.00851756, 0.00838551, 0.00825551, 0.00812752, 0.00800151, 0.00787746, 0.00775533, 0.00763509, 0.00751672, 0.00740019, 0.00728546, 0.00717251, 0.00706131, 0.00695183, 0.00684405, 0.00673795, 0.00663348, 0.00653064, 0.00642939, 0.00632972, 0.00623158, 0.00613497, 0.00603986, 0.00594622, 0.00585403, 0.00576327, 0.00567392, 0.00558595, 0.00549935, 0.00541409, 0.00533015, 0.00524752, 0.00516616, 0.00508607, 0.00500722, 0.00492959, 0.00485316, 0.00477792, 0.00470384, 0.00463092, 0.00455912, 0.00448844, 0.00441885, 0.00435035, 0.0042829, 0.0042165, 0.00415113, 0.00408677, 0.00402341, 0.00396103, 0.00389962, 0.00383917, 0.00377965, 0.00372105, 0.00366336, 0.00360656, 0.00355065, 0.0034956, 0.00344141, 0.00338805, 0.00333553, 0.00328381, 0.0032329, 0.00318278, 0.00313344, 0.00308486, 0.00303703, 0.00298995, 0.00294359, 0.00289795, 0.00285303, 0.00280879, 0.00276525, 0.00272238, 0.00268017, 0.00263862, 0.00259771, 0.00255744, 0.00251779, 0.00247875, 0.00244032, 0.00240249, 0.00236524, 0.00232857, 0.00229247, 0.00225693, 0.00222194, 0.00218749, 0.00215358, 0.00212019, 0.00208732, 0.00205496, 0.0020231, 0.00199173, 0.00196085, 0.00193045, 0.00190053, 0.00187106, 0.00184205, 0.00181349, 0.00178538, 0.0017577, 0.00173045, 0.00170362, 0.00167721, 0.0016512, 0.00162561, 0.0016004, 0.00157559, 0.00155116, 0.00152711, 0.00150344, 0.00148013, 0.00145718, 0.00143459, 0.00141235, 0.00139045, 0.0013689, 0.00134767, 0.00132678, 0.00130621, 0.00128596, 0.00126602, 0.00124639, 0.00122707, 0.00120805, 0.00118932, 0.00117088, 0.00115273, 0.00113486, 0.00111726, 0.00109994, 0.00108289, 0.0010661, 0.00104957, 0.0010333, 0.00101728, 0.00100151, 0.000985979, 0.000970693, 0.000955644, 0.000940828, 0.000926242, 0.000911882, 0.000897745, 0.000883826, 0.000870124, 0.000856634, 0.000843353, 0.000830278, 0.000817406, 0.000804733, 0.000792257, 0.000779974, 0.000767882, 0.000755977, 0.000744256, 0.000732718, 0.000721358, 0.000710174, 0.000699164, 0.000688325, 0.000677653, 0.000667147, 0.000656804, 0.000646621, 0.000636596, 0.000626727, 0.00061701, 0.000607444, 0.000598027, 0.000588755, 0.000579627, 0.000570641, 0.000561794, 0.000553084, 0.00054451, 0.000536068, 0.000527757, 0.000519575, 0.000511519, 0.000503589, 0.000495782, 0.000488095, 0.000480528, 0.000473078, 0.000465744, 0.000458523, 0.000451414, 0.000444416, 0.000437526, 0.000430743, 0.000424064, 0.00041749, 0.000411017, 0.000404645, 0.000398372, 0.000392196, 0.000386115, 0.000380129, 0.000374236, 0.000368434, 0.000362722, 0.000357098, 0.000351562, 0.000346111, 0.000340745};
          else
            exit(1);
        };
        ~Softmax() {};

        #pragma hls_design interface
        void run(chanI &inp, chanO &out){
          
          dtype max_val;

          for (int n = 0; n < N; n+=Tn) {
            Data_t_i cur_inp;

            if (inp.available(1)) {
              cur_inp = inp.read();
              for (int tn = 0; tn < Tn; tn++) {
                inp_buffer[n+tn] = cur_inp[tn];
                max_val = (n+tn == 0) ? cur_inp[tn] : ((max_val > cur_inp[tn]) ? max_val : cur_inp[tn]);
              }
            }
            
          }

          for (int n = 0; n < N; n+=Tm) {
            Data_t_o postAct;
            for (int tm = 0; tm < Tm; tm++) {
              dtype diff = max_val - inp_buffer[n+tm];
              postAct.itm[tm] = calc_exp(diff);
            } 
            out.write(postAct);
          }

        };
    };
  }; // (namespace) hls
}; // (namespace) dcnn

#endif
